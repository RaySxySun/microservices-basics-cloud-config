server:
  port: 8082
  contextPath: /task-service

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

spring:
  zipkin:
    baseUrl: http://localhost:9411/
  sleuth:
    sampler:
      percentage: 1.0

# When enabled=false, traces log to the console. Comment to send to zipkin
sample:
  zipkin:
    enabled: true

# Note that we will use the JWT token to get user data
security:
  oauth2:
    resource:
      jwt:
        keyValue: |
-----BEGIN PUBLIC KEY----- 
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAh8ZsJOPLp+s2QWZ5wXGo gx4zp6IZM+V7T666M+gJsFc54d1LMhsfStfgyuAGY2lJNNsVe7FIA8YegG9RVmVa AtZkAF13uMrieysNRMVdEDrerB4EX8kwUxA+BlM1f1riBLzbNnW5bd9DPODfA6BR pEXEdmp9g5MyeeaXYXxfWdyz5xYUcmCP/YALI23LoF71JC9W1jOpk0HxZ73F+90x vOKBwqrPf5I7g/Lrerm8NOoqZJNyOXZrhYGmQOhEnpjX1FESEoimgu4NUq4MVurx 3zZgsx4edPUeFX9DVGZTwePRHoTfdZu5UbmDuzfLf2bhdfId7n4QyuS0fYBY0Kas WQIDAQAB 
-----END PUBLIC KEY-----
---
# task-webservice instance when used on Docker
spring:
  profiles: docker
  zipkin:
    baseUrl: http://zipkinserver:9411/

eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://eurekaregistry:8761/eureka/

# Define the port where the API gateway server would be running. This could always be port 8080
# since each docker container has it's own IP
server:
  port: 8080

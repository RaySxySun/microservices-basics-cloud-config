server:
  port: 8083

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

spring:
  zipkin:
    baseUrl: http://localhost:9411/
  sleuth:
    sampler:
      percentage: 1.0

# When enabled=false, traces log to the console. Comment to send to zipkin
sample:
  zipkin:
    enabled: true

# Note that we will use the JWT token to get user data
security:
  oauth2:
    resource:
      jwt:
        keyValue: |
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiEzOXLtjVgF1gQvleAcq
dlMqBf/29I6J/wj/lmxJAnxeQlOirUXGsaIr7iGtQbe/V6HrCk3qYmNPdiuyrHpU
MDFUf4mv8zPYMmK6kVHfs7DALUzBrNVvPS1Gq6KVW2KU/IIBBh33yn0I0eqvnG5g
uf4Lph3bjqQ+mZB408wp9nuzQBgBc+eXYm1rj8UyUAjAEgVLerOfTjfRMzBt3hP7
B5mEnrjVF1k2EnVOLnOCJQFQhOZb+jFfGd15pmHHzdFOetAgpDWXMm5NRStm0Sv0
UGbtn3mn2fCp16g3yy60YghArMEZnAaGEX32X95bw6Q8/FBZN40RXeQdoEJD8dey
KwIDAQAB
-----END PUBLIC KEY-----
---
# comments-webservice instance when used on Docker
spring:
  profiles: docker
  zipkin:
    baseUrl: http://zipkinserver:9411/

eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://eurekaregistry:8761/eureka/

# Define the port where the API gateway server would be running. This could always be port 8080
# since each docker container has it's own IP
server:
  port: 8080
